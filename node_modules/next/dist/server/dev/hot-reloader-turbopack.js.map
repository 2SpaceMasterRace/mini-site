{"version":3,"sources":["../../../src/server/dev/hot-reloader-turbopack.ts"],"sourcesContent":["import type { Socket } from 'net'\nimport { mkdir, writeFile } from 'fs/promises'\nimport { join, extname } from 'path'\n\nimport ws from 'next/dist/compiled/ws'\n\nimport type { OutputState } from '../../build/output/store'\nimport { store as consoleStore } from '../../build/output/store'\nimport type {\n  CompilationError,\n  HMR_ACTION_TYPES,\n  NextJsHotReloaderInterface,\n  ReloadPageAction,\n  SyncAction,\n  TurbopackConnectedAction,\n} from './hot-reloader-types'\nimport { HMR_ACTIONS_SENT_TO_BROWSER } from './hot-reloader-types'\nimport type { Update as TurbopackUpdate } from '../../build/swc'\nimport {\n  createDefineEnv,\n  type Endpoint,\n  type TurbopackResult,\n  type WrittenEndpoint,\n} from '../../build/swc'\nimport * as Log from '../../build/output/log'\nimport {\n  getVersionInfo,\n  matchNextPageBundleRequest,\n} from './hot-reloader-webpack'\nimport { BLOCKED_PAGES } from '../../shared/lib/constants'\nimport { getOverlayMiddleware } from '../../client/components/react-dev-overlay/server/middleware-turbopack'\nimport { PageNotFoundError } from '../../shared/lib/utils'\nimport { debounce } from '../utils'\nimport { deleteAppClientCache, deleteCache } from './require-cache'\nimport {\n  clearAllModuleContexts,\n  clearModuleContext,\n} from '../lib/render-server'\nimport { denormalizePagePath } from '../../shared/lib/page-path/denormalize-page-path'\nimport { trace } from '../../trace'\nimport {\n  AssetMapper,\n  type ChangeSubscriptions,\n  type ClientState,\n  type EntryIssuesMap,\n  formatIssue,\n  getTurbopackJsConfig,\n  handleEntrypoints,\n  handlePagesErrorRoute,\n  handleRouteType,\n  hasEntrypointForKey,\n  msToNs,\n  processIssues,\n  type ReadyIds,\n  renderStyledStringToErrorAnsi,\n  type SendHmr,\n  type StartBuilding,\n  processTopLevelIssues,\n  type TopLevelIssuesMap,\n  isWellKnownError,\n  printNonFatalIssue,\n  normalizedPageToTurbopackStructureRoute,\n} from './turbopack-utils'\nimport {\n  propagateServerField,\n  type ServerFields,\n  type SetupOpts,\n} from '../lib/router-utils/setup-dev-bundler'\nimport { TurbopackManifestLoader } from './turbopack/manifest-loader'\nimport type { Entrypoints } from './turbopack/types'\nimport { findPagePathData } from './on-demand-entry-handler'\nimport type { RouteDefinition } from '../route-definitions/route-definition'\nimport {\n  type EntryKey,\n  getEntryKey,\n  splitEntryKey,\n} from './turbopack/entry-key'\nimport { FAST_REFRESH_RUNTIME_RELOAD } from './messages'\nimport { generateEncryptionKeyBase64 } from '../app-render/encryption-utils'\nimport { isAppPageRouteDefinition } from '../route-definitions/app-page-route-definition'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\nimport { getNodeDebugType } from '../lib/utils'\n\nconst wsServer = new ws.Server({ noServer: true })\nconst isTestMode = !!(\n  process.env.NEXT_TEST_MODE ||\n  process.env.__NEXT_TEST_MODE ||\n  process.env.DEBUG\n)\n\nconst sessionId = Math.floor(Number.MAX_SAFE_INTEGER * Math.random())\n\nexport async function createHotReloaderTurbopack(\n  opts: SetupOpts,\n  serverFields: ServerFields,\n  distDir: string,\n  resetFetch: () => void\n): Promise<NextJsHotReloaderInterface> {\n  const buildId = 'development'\n  const { nextConfig, dir } = opts\n\n  const { loadBindings } =\n    require('../../build/swc') as typeof import('../../build/swc')\n\n  let bindings = await loadBindings()\n\n  // For the debugging purpose, check if createNext or equivalent next instance setup in test cases\n  // works correctly. Normally `run-test` hides output so only will be visible when `--debug` flag is used.\n  if (process.env.TURBOPACK && isTestMode) {\n    require('console').log('Creating turbopack project', {\n      dir,\n      testMode: isTestMode,\n    })\n  }\n\n  const hasRewrites =\n    opts.fsChecker.rewrites.afterFiles.length > 0 ||\n    opts.fsChecker.rewrites.beforeFiles.length > 0 ||\n    opts.fsChecker.rewrites.fallback.length > 0\n\n  const hotReloaderSpan = trace('hot-reloader', undefined, {\n    version: process.env.__NEXT_VERSION as string,\n  })\n  // Ensure the hotReloaderSpan is flushed immediately as it's the parentSpan for all processing\n  // of the current `next dev` invocation.\n  hotReloaderSpan.stop()\n\n  const encryptionKey = await generateEncryptionKeyBase64(true)\n\n  // TODO: Implement\n  let clientRouterFilters: any\n  if (nextConfig.experimental.clientRouterFilter) {\n    // TODO this need to be set correctly for persistent caching to work\n  }\n\n  const project = await bindings.turbo.createProject(\n    {\n      projectPath: dir,\n      rootPath: opts.nextConfig.outputFileTracingRoot || dir,\n      nextConfig: opts.nextConfig,\n      jsConfig: await getTurbopackJsConfig(dir, nextConfig),\n      watch: true,\n      dev: true,\n      env: process.env as Record<string, string>,\n      defineEnv: createDefineEnv({\n        isTurbopack: true,\n        clientRouterFilters,\n        config: nextConfig,\n        dev: true,\n        distDir,\n        fetchCacheKeyPrefix: opts.nextConfig.experimental.fetchCacheKeyPrefix,\n        hasRewrites,\n        // TODO: Implement\n        middlewareMatchers: undefined,\n      }),\n      buildId,\n      encryptionKey,\n      previewProps: opts.fsChecker.prerenderManifest.preview,\n    },\n    {\n      memoryLimit: opts.nextConfig.experimental.turbo?.memoryLimit,\n    }\n  )\n  opts.onCleanup(() => project.onExit())\n  const entrypointsSubscription = project.entrypointsSubscribe()\n\n  const currentWrittenEntrypoints: Map<EntryKey, WrittenEndpoint> = new Map()\n  const currentEntrypoints: Entrypoints = {\n    global: {\n      app: undefined,\n      document: undefined,\n      error: undefined,\n\n      middleware: undefined,\n      instrumentation: undefined,\n    },\n\n    page: new Map(),\n    app: new Map(),\n  }\n\n  const currentTopLevelIssues: TopLevelIssuesMap = new Map()\n  const currentEntryIssues: EntryIssuesMap = new Map()\n\n  const manifestLoader = new TurbopackManifestLoader({\n    buildId,\n    distDir,\n    encryptionKey,\n  })\n\n  // Dev specific\n  const changeSubscriptions: ChangeSubscriptions = new Map()\n  const serverPathState = new Map<string, string>()\n  const readyIds: ReadyIds = new Set()\n  let currentEntriesHandlingResolve: ((value?: unknown) => void) | undefined\n  let currentEntriesHandling = new Promise(\n    (resolve) => (currentEntriesHandlingResolve = resolve)\n  )\n\n  const assetMapper = new AssetMapper()\n\n  function clearRequireCache(\n    key: EntryKey,\n    writtenEndpoint: WrittenEndpoint,\n    {\n      force,\n    }: {\n      // Always clear the cache, don't check if files have changed\n      force?: boolean\n    } = {}\n  ): void {\n    if (force) {\n      for (const { path, contentHash } of writtenEndpoint.serverPaths) {\n        serverPathState.set(path, contentHash)\n      }\n    } else {\n      // Figure out if the server files have changed\n      let hasChange = false\n      for (const { path, contentHash } of writtenEndpoint.serverPaths) {\n        // We ignore source maps\n        if (path.endsWith('.map')) continue\n        const localKey = `${key}:${path}`\n        const localHash = serverPathState.get(localKey)\n        const globalHash = serverPathState.get(path)\n        if (\n          (localHash && localHash !== contentHash) ||\n          (globalHash && globalHash !== contentHash)\n        ) {\n          hasChange = true\n          serverPathState.set(key, contentHash)\n          serverPathState.set(path, contentHash)\n        } else {\n          if (!localHash) {\n            serverPathState.set(key, contentHash)\n          }\n          if (!globalHash) {\n            serverPathState.set(path, contentHash)\n          }\n        }\n      }\n\n      if (!hasChange) {\n        return\n      }\n    }\n\n    resetFetch()\n\n    const hasAppPaths = writtenEndpoint.serverPaths.some(({ path: p }) =>\n      p.startsWith('server/app')\n    )\n\n    if (hasAppPaths) {\n      deleteAppClientCache()\n    }\n\n    const serverPaths = writtenEndpoint.serverPaths.map(({ path: p }) =>\n      join(distDir, p)\n    )\n\n    for (const file of serverPaths) {\n      clearModuleContext(file)\n      deleteCache(file)\n    }\n\n    return\n  }\n\n  const buildingIds = new Set()\n\n  const startBuilding: StartBuilding = (id, requestUrl, forceRebuild) => {\n    if (!forceRebuild && readyIds.has(id)) {\n      return () => {}\n    }\n    if (buildingIds.size === 0) {\n      consoleStore.setState(\n        {\n          loading: true,\n          trigger: id,\n          url: requestUrl,\n        } as OutputState,\n        true\n      )\n    }\n    buildingIds.add(id)\n    return function finishBuilding() {\n      if (buildingIds.size === 0) {\n        return\n      }\n      readyIds.add(id)\n      buildingIds.delete(id)\n      if (buildingIds.size === 0) {\n        hmrEventHappened = false\n        consoleStore.setState(\n          {\n            loading: false,\n          } as OutputState,\n          true\n        )\n      }\n    }\n  }\n\n  let hmrEventHappened = false\n  let hmrHash = 0\n\n  const clients = new Set<ws>()\n  const clientStates = new WeakMap<ws, ClientState>()\n\n  function sendToClient(client: ws, payload: HMR_ACTION_TYPES) {\n    client.send(JSON.stringify(payload))\n  }\n\n  function sendEnqueuedMessages() {\n    for (const [, issueMap] of currentEntryIssues) {\n      if (\n        [...issueMap.values()].filter((i) => i.severity !== 'warning').length >\n        0\n      ) {\n        // During compilation errors we want to delay the HMR events until errors are fixed\n        return\n      }\n    }\n\n    for (const client of clients) {\n      const state = clientStates.get(client)\n      if (!state) {\n        continue\n      }\n\n      for (const [, issueMap] of state.clientIssues) {\n        if (\n          [...issueMap.values()].filter((i) => i.severity !== 'warning')\n            .length > 0\n        ) {\n          // During compilation errors we want to delay the HMR events until errors are fixed\n          return\n        }\n      }\n\n      for (const payload of state.hmrPayloads.values()) {\n        sendToClient(client, payload)\n      }\n      state.hmrPayloads.clear()\n\n      if (state.turbopackUpdates.length > 0) {\n        sendToClient(client, {\n          action: HMR_ACTIONS_SENT_TO_BROWSER.TURBOPACK_MESSAGE,\n          data: state.turbopackUpdates,\n        })\n        state.turbopackUpdates.length = 0\n      }\n    }\n  }\n  const sendEnqueuedMessagesDebounce = debounce(sendEnqueuedMessages, 2)\n\n  const sendHmr: SendHmr = (id: string, payload: HMR_ACTION_TYPES) => {\n    for (const client of clients) {\n      clientStates.get(client)?.hmrPayloads.set(id, payload)\n    }\n\n    hmrEventHappened = true\n    sendEnqueuedMessagesDebounce()\n  }\n\n  function sendTurbopackMessage(payload: TurbopackUpdate) {\n    // TODO(PACK-2049): For some reason we end up emitting hundreds of issues messages on bigger apps,\n    //   a lot of which are duplicates.\n    //   They are currently not handled on the client at all, so might as well not send them for now.\n    payload.diagnostics = []\n    payload.issues = []\n\n    for (const client of clients) {\n      clientStates.get(client)?.turbopackUpdates.push(payload)\n    }\n\n    hmrEventHappened = true\n    sendEnqueuedMessagesDebounce()\n  }\n\n  async function subscribeToChanges(\n    key: EntryKey,\n    includeIssues: boolean,\n    endpoint: Endpoint,\n    makePayload: (\n      change: TurbopackResult\n    ) => Promise<HMR_ACTION_TYPES> | HMR_ACTION_TYPES | void\n  ) {\n    if (changeSubscriptions.has(key)) {\n      return\n    }\n\n    const { side } = splitEntryKey(key)\n\n    const changedPromise = endpoint[`${side}Changed`](includeIssues)\n    changeSubscriptions.set(key, changedPromise)\n    const changed = await changedPromise\n\n    for await (const change of changed) {\n      processIssues(currentEntryIssues, key, change, false, true)\n      const payload = await makePayload(change)\n      if (payload) {\n        sendHmr(key, payload)\n      }\n    }\n  }\n\n  async function unsubscribeFromChanges(key: EntryKey) {\n    const subscription = await changeSubscriptions.get(key)\n    if (subscription) {\n      await subscription.return?.()\n      changeSubscriptions.delete(key)\n    }\n    currentEntryIssues.delete(key)\n  }\n\n  async function subscribeToHmrEvents(client: ws, id: string) {\n    const key = getEntryKey('assets', 'client', id)\n    if (!hasEntrypointForKey(currentEntrypoints, key, assetMapper)) {\n      // maybe throw an error / force the client to reload?\n      return\n    }\n\n    const state = clientStates.get(client)\n    if (!state || state.subscriptions.has(id)) {\n      return\n    }\n\n    const subscription = project!.hmrEvents(id)\n    state.subscriptions.set(id, subscription)\n\n    // The subscription will always emit once, which is the initial\n    // computation. This is not a change, so swallow it.\n    try {\n      await subscription.next()\n\n      for await (const data of subscription) {\n        processIssues(state.clientIssues, key, data, false, true)\n        if (data.type !== 'issues') {\n          sendTurbopackMessage(data)\n        }\n      }\n    } catch (e) {\n      // The client might be using an HMR session from a previous server, tell them\n      // to fully reload the page to resolve the issue. We can't use\n      // `hotReloader.send` since that would force every connected client to\n      // reload, only this client is out of date.\n      const reloadAction: ReloadPageAction = {\n        action: HMR_ACTIONS_SENT_TO_BROWSER.RELOAD_PAGE,\n      }\n      sendToClient(client, reloadAction)\n      client.close()\n      return\n    }\n  }\n\n  function unsubscribeFromHmrEvents(client: ws, id: string) {\n    const state = clientStates.get(client)\n    if (!state) {\n      return\n    }\n\n    const subscription = state.subscriptions.get(id)\n    subscription?.return!()\n\n    const key = getEntryKey('assets', 'client', id)\n    state.clientIssues.delete(key)\n  }\n\n  async function handleEntrypointsSubscription() {\n    for await (const entrypoints of entrypointsSubscription) {\n      if (!currentEntriesHandlingResolve) {\n        currentEntriesHandling = new Promise(\n          // eslint-disable-next-line no-loop-func\n          (resolve) => (currentEntriesHandlingResolve = resolve)\n        )\n      }\n\n      processTopLevelIssues(currentTopLevelIssues, entrypoints)\n\n      await handleEntrypoints({\n        entrypoints,\n\n        currentEntrypoints,\n\n        currentEntryIssues,\n        manifestLoader,\n        devRewrites: opts.fsChecker.rewrites,\n        productionRewrites: undefined,\n        logErrors: true,\n\n        dev: {\n          assetMapper,\n          changeSubscriptions,\n          clients,\n          clientStates,\n          serverFields,\n\n          hooks: {\n            handleWrittenEndpoint: (id, result) => {\n              currentWrittenEntrypoints.set(id, result)\n              clearRequireCache(id, result)\n            },\n            propagateServerField: propagateServerField.bind(null, opts),\n            sendHmr,\n            startBuilding,\n            subscribeToChanges,\n            unsubscribeFromChanges,\n            unsubscribeFromHmrEvents,\n          },\n        },\n      })\n\n      currentEntriesHandlingResolve!()\n      currentEntriesHandlingResolve = undefined\n    }\n  }\n\n  await mkdir(join(distDir, 'server'), { recursive: true })\n  await mkdir(join(distDir, 'static', buildId), { recursive: true })\n  await writeFile(\n    join(distDir, 'package.json'),\n    JSON.stringify(\n      {\n        type: 'commonjs',\n      },\n      null,\n      2\n    )\n  )\n  const overlayMiddleware = getOverlayMiddleware(project)\n  const versionInfoPromise = getVersionInfo(\n    isTestMode || opts.telemetry.isEnabled\n  )\n\n  let devtoolsFrontendUrl: string | undefined\n  const nodeDebugType = getNodeDebugType()\n  if (nodeDebugType) {\n    const debugPort = process.debugPort\n    let debugInfo\n    try {\n      // It requires to use 127.0.0.1 instead of localhost for server-side fetching.\n      const debugInfoList = await fetch(\n        `http://127.0.0.1:${debugPort}/json/list`\n      ).then((res) => res.json())\n      debugInfo = debugInfoList[0]\n    } catch {}\n    if (debugInfo) {\n      devtoolsFrontendUrl = debugInfo.devtoolsFrontendUrl\n    }\n  }\n\n  const hotReloader: NextJsHotReloaderInterface = {\n    turbopackProject: project,\n    activeWebpackConfigs: undefined,\n    serverStats: null,\n    edgeServerStats: null,\n    async run(req, res, _parsedUrl) {\n      // intercept page chunks request and ensure them with turbopack\n      if (req.url?.startsWith('/_next/static/chunks/pages/')) {\n        const params = matchNextPageBundleRequest(req.url)\n\n        if (params) {\n          const decodedPagePath = `/${params.path\n            .map((param: string) => decodeURIComponent(param))\n            .join('/')}`\n\n          const denormalizedPagePath = denormalizePagePath(decodedPagePath)\n\n          await hotReloader\n            .ensurePage({\n              page: denormalizedPagePath,\n              clientOnly: false,\n              definition: undefined,\n              url: req.url,\n            })\n            .catch(console.error)\n        }\n      }\n\n      await overlayMiddleware(req, res)\n\n      // Request was not finished.\n      return { finished: undefined }\n    },\n\n    // TODO: Figure out if socket type can match the NextJsHotReloaderInterface\n    onHMR(req, socket: Socket, head, onUpgrade) {\n      wsServer.handleUpgrade(req, socket, head, (client) => {\n        onUpgrade(client)\n        const clientIssues: EntryIssuesMap = new Map()\n        const subscriptions: Map<string, AsyncIterator<any>> = new Map()\n\n        clients.add(client)\n        clientStates.set(client, {\n          clientIssues,\n          hmrPayloads: new Map(),\n          turbopackUpdates: [],\n          subscriptions,\n        })\n\n        client.on('close', () => {\n          // Remove active subscriptions\n          for (const subscription of subscriptions.values()) {\n            subscription.return?.()\n          }\n          clientStates.delete(client)\n          clients.delete(client)\n        })\n\n        client.addEventListener('message', ({ data }) => {\n          const parsedData = JSON.parse(\n            typeof data !== 'string' ? data.toString() : data\n          )\n\n          // Next.js messages\n          switch (parsedData.event) {\n            case 'ping':\n              // Ping doesn't need additional handling in Turbopack.\n              break\n            case 'span-end': {\n              hotReloaderSpan.manualTraceChild(\n                parsedData.spanName,\n                msToNs(parsedData.startTime),\n                msToNs(parsedData.endTime),\n                parsedData.attributes\n              )\n              break\n            }\n            case 'client-hmr-latency': // { id, startTime, endTime, page, updatedModules, isPageHidden }\n              hotReloaderSpan.manualTraceChild(\n                parsedData.event,\n                msToNs(parsedData.startTime),\n                msToNs(parsedData.endTime),\n                {\n                  updatedModules: parsedData.updatedModules,\n                  page: parsedData.page,\n                  isPageHidden: parsedData.isPageHidden,\n                }\n              )\n              break\n            case 'client-error': // { errorCount, clientId }\n            case 'client-warning': // { warningCount, clientId }\n            case 'client-success': // { clientId }\n            case 'server-component-reload-page': // { clientId }\n            case 'client-reload-page': // { clientId }\n            case 'client-removed-page': // { page }\n            case 'client-full-reload': // { stackTrace, hadRuntimeError }\n              const { hadRuntimeError, dependencyChain } = parsedData\n              if (hadRuntimeError) {\n                Log.warn(FAST_REFRESH_RUNTIME_RELOAD)\n              }\n              if (\n                Array.isArray(dependencyChain) &&\n                typeof dependencyChain[0] === 'string'\n              ) {\n                const cleanedModulePath = dependencyChain[0]\n                  .replace(/^\\[project\\]/, '.')\n                  .replace(/ \\[.*\\] \\(.*\\)$/, '')\n                Log.warn(\n                  `Fast Refresh had to perform a full reload when ${cleanedModulePath} changed. Read more: https://nextjs.org/docs/messages/fast-refresh-reload`\n                )\n              }\n              break\n            case 'client-added-page':\n              // TODO\n              break\n\n            default:\n              // Might be a Turbopack message...\n              if (!parsedData.type) {\n                throw new Error(`unrecognized HMR message \"${data}\"`)\n              }\n          }\n\n          // Turbopack messages\n          switch (parsedData.type) {\n            case 'turbopack-subscribe':\n              subscribeToHmrEvents(client, parsedData.path)\n              break\n\n            case 'turbopack-unsubscribe':\n              unsubscribeFromHmrEvents(client, parsedData.path)\n              break\n\n            default:\n              if (!parsedData.event) {\n                throw new Error(`unrecognized Turbopack HMR message \"${data}\"`)\n              }\n          }\n        })\n\n        const turbopackConnected: TurbopackConnectedAction = {\n          action: HMR_ACTIONS_SENT_TO_BROWSER.TURBOPACK_CONNECTED,\n          data: { sessionId },\n        }\n        sendToClient(client, turbopackConnected)\n\n        const errors: CompilationError[] = []\n\n        for (const entryIssues of currentEntryIssues.values()) {\n          for (const issue of entryIssues.values()) {\n            if (issue.severity !== 'warning') {\n              errors.push({\n                message: formatIssue(issue),\n              })\n            } else {\n              printNonFatalIssue(issue)\n            }\n          }\n        }\n\n        ;(async function () {\n          const versionInfo = await versionInfoPromise\n\n          const sync: SyncAction = {\n            action: HMR_ACTIONS_SENT_TO_BROWSER.SYNC,\n            errors,\n            warnings: [],\n            hash: '',\n            versionInfo,\n            debug: {\n              devtoolsFrontendUrl,\n            },\n          }\n\n          sendToClient(client, sync)\n        })()\n      })\n    },\n\n    send(action) {\n      const payload = JSON.stringify(action)\n      for (const client of clients) {\n        client.send(payload)\n      }\n    },\n\n    setHmrServerError(_error) {\n      // Not implemented yet.\n    },\n    clearHmrServerError() {\n      // Not implemented yet.\n    },\n    async start() {},\n    async stop() {\n      // Not implemented yet.\n    },\n    async getCompilationErrors(page) {\n      const appEntryKey = getEntryKey('app', 'server', page)\n      const pagesEntryKey = getEntryKey('pages', 'server', page)\n\n      const topLevelIssues = currentTopLevelIssues.values()\n\n      const thisEntryIssues =\n        currentEntryIssues.get(appEntryKey) ??\n        currentEntryIssues.get(pagesEntryKey)\n\n      if (thisEntryIssues !== undefined && thisEntryIssues.size > 0) {\n        // If there is an error related to the requesting page we display it instead of the first error\n        return [...topLevelIssues, ...thisEntryIssues.values()]\n          .map((issue) => {\n            const formattedIssue = formatIssue(issue)\n            if (issue.severity === 'warning') {\n              printNonFatalIssue(issue)\n              return null\n            } else if (isWellKnownError(issue)) {\n              Log.error(formattedIssue)\n            }\n\n            return new Error(formattedIssue)\n          })\n          .filter((error) => error !== null)\n      }\n\n      // Otherwise, return all errors across pages\n      const errors = []\n      for (const issue of topLevelIssues) {\n        if (issue.severity !== 'warning') {\n          errors.push(new Error(formatIssue(issue)))\n        }\n      }\n      for (const entryIssues of currentEntryIssues.values()) {\n        for (const issue of entryIssues.values()) {\n          if (issue.severity !== 'warning') {\n            const message = formatIssue(issue)\n            errors.push(new Error(message))\n          } else {\n            printNonFatalIssue(issue)\n          }\n        }\n      }\n      return errors\n    },\n    async invalidate({\n      // .env files or tsconfig/jsconfig change\n      reloadAfterInvalidation,\n    }) {\n      if (reloadAfterInvalidation) {\n        for (const [key, entrypoint] of currentWrittenEntrypoints) {\n          clearRequireCache(key, entrypoint, { force: true })\n        }\n\n        await clearAllModuleContexts()\n        this.send({\n          action: HMR_ACTIONS_SENT_TO_BROWSER.SERVER_COMPONENT_CHANGES,\n        })\n      }\n    },\n    async buildFallbackError() {\n      // Not implemented yet.\n    },\n    async ensurePage({\n      page: inputPage,\n      // Unused parameters\n      // clientOnly,\n      appPaths,\n      definition,\n      isApp,\n      url: requestUrl,\n    }) {\n      if (BLOCKED_PAGES.includes(inputPage) && inputPage !== '/_error') {\n        return\n      }\n\n      let routeDef: Pick<RouteDefinition, 'filename' | 'bundlePath' | 'page'> =\n        definition ??\n        (await findPagePathData(\n          dir,\n          inputPage,\n          nextConfig.pageExtensions,\n          opts.pagesDir,\n          opts.appDir\n        ))\n\n      // If the route is actually an app page route, then we should have access\n      // to the app route definition, and therefore, the appPaths from it.\n      if (!appPaths && definition && isAppPageRouteDefinition(definition)) {\n        appPaths = definition.appPaths\n      }\n\n      let page = routeDef.page\n      if (appPaths) {\n        const normalizedPage = normalizeAppPath(page)\n\n        // filter out paths that are not exact matches (e.g. catchall)\n        const matchingAppPaths = appPaths.filter(\n          (path) => normalizeAppPath(path) === normalizedPage\n        )\n\n        // the last item in the array is the root page, if there are parallel routes\n        page = matchingAppPaths[matchingAppPaths.length - 1]\n      }\n\n      const pathname = definition?.pathname ?? inputPage\n\n      if (page === '/_error') {\n        let finishBuilding = startBuilding(pathname, requestUrl, false)\n        try {\n          await handlePagesErrorRoute({\n            currentEntryIssues,\n            entrypoints: currentEntrypoints,\n            manifestLoader,\n            devRewrites: opts.fsChecker.rewrites,\n            productionRewrites: undefined,\n            logErrors: true,\n\n            hooks: {\n              subscribeToChanges,\n              handleWrittenEndpoint: (id, result) => {\n                clearRequireCache(id, result)\n                currentWrittenEntrypoints.set(id, result)\n                assetMapper.setPathsForKey(id, result.clientPaths)\n              },\n            },\n          })\n        } finally {\n          finishBuilding()\n        }\n        return\n      }\n\n      await currentEntriesHandling\n\n      const isInsideAppDir = routeDef.bundlePath.startsWith('app/')\n      const normalizedAppPage = normalizedPageToTurbopackStructureRoute(\n        page,\n        extname(routeDef.filename)\n      )\n\n      const route = isInsideAppDir\n        ? currentEntrypoints.app.get(normalizedAppPage)\n        : currentEntrypoints.page.get(page)\n\n      if (!route) {\n        // TODO: why is this entry missing in turbopack?\n        if (page === '/middleware') return\n        if (page === '/src/middleware') return\n        if (page === '/instrumentation') return\n        if (page === '/src/instrumentation') return\n\n        throw new PageNotFoundError(`route not found ${page}`)\n      }\n\n      // We don't throw on ensureOpts.isApp === true for page-api\n      // since this can happen when app pages make\n      // api requests to page API routes.\n      if (isApp && route.type === 'page') {\n        throw new Error(`mis-matched route type: isApp && page for ${page}`)\n      }\n\n      const finishBuilding = startBuilding(pathname, requestUrl, false)\n      try {\n        await handleRouteType({\n          dev: true,\n          page,\n          pathname,\n          route,\n          currentEntryIssues,\n          entrypoints: currentEntrypoints,\n          manifestLoader,\n          readyIds,\n          devRewrites: opts.fsChecker.rewrites,\n          productionRewrites: undefined,\n          logErrors: true,\n\n          hooks: {\n            subscribeToChanges,\n            handleWrittenEndpoint: (id, result) => {\n              currentWrittenEntrypoints.set(id, result)\n              clearRequireCache(id, result)\n              assetMapper.setPathsForKey(id, result.clientPaths)\n            },\n          },\n        })\n      } finally {\n        finishBuilding()\n      }\n    },\n  }\n\n  handleEntrypointsSubscription().catch((err) => {\n    console.error(err)\n    process.exit(1)\n  })\n\n  // Write empty manifests\n  await currentEntriesHandling\n  await manifestLoader.writeManifests({\n    devRewrites: opts.fsChecker.rewrites,\n    productionRewrites: undefined,\n    entrypoints: currentEntrypoints,\n  })\n\n  async function handleProjectUpdates() {\n    for await (const updateMessage of project.updateInfoSubscribe(30)) {\n      switch (updateMessage.updateType) {\n        case 'start': {\n          hotReloader.send({ action: HMR_ACTIONS_SENT_TO_BROWSER.BUILDING })\n          break\n        }\n        case 'end': {\n          sendEnqueuedMessages()\n\n          function addErrors(\n            errorsMap: Map<string, CompilationError>,\n            issues: EntryIssuesMap\n          ) {\n            for (const issueMap of issues.values()) {\n              for (const [key, issue] of issueMap) {\n                if (issue.severity === 'warning') continue\n                if (errorsMap.has(key)) continue\n\n                const message = formatIssue(issue)\n\n                errorsMap.set(key, {\n                  message,\n                  details: issue.detail\n                    ? renderStyledStringToErrorAnsi(issue.detail)\n                    : undefined,\n                })\n              }\n            }\n          }\n\n          const errors = new Map<string, CompilationError>()\n          addErrors(errors, currentEntryIssues)\n\n          for (const client of clients) {\n            const state = clientStates.get(client)\n            if (!state) {\n              continue\n            }\n\n            const clientErrors = new Map(errors)\n            addErrors(clientErrors, state.clientIssues)\n\n            sendToClient(client, {\n              action: HMR_ACTIONS_SENT_TO_BROWSER.BUILT,\n              hash: String(++hmrHash),\n              errors: [...clientErrors.values()],\n              warnings: [],\n            })\n          }\n\n          if (hmrEventHappened) {\n            const time = updateMessage.value.duration\n            const timeMessage =\n              time > 2000 ? `${Math.round(time / 100) / 10}s` : `${time}ms`\n            Log.event(`Compiled in ${timeMessage}`)\n            hmrEventHappened = false\n          }\n          break\n        }\n        default:\n      }\n    }\n  }\n\n  handleProjectUpdates().catch((err) => {\n    console.error(err)\n    process.exit(1)\n  })\n\n  return hotReloader\n}\n"],"names":["createHotReloaderTurbopack","wsServer","ws","Server","noServer","isTestMode","process","env","NEXT_TEST_MODE","__NEXT_TEST_MODE","DEBUG","sessionId","Math","floor","Number","MAX_SAFE_INTEGER","random","opts","serverFields","distDir","resetFetch","buildId","nextConfig","dir","loadBindings","require","bindings","TURBOPACK","log","testMode","hasRewrites","fsChecker","rewrites","afterFiles","length","beforeFiles","fallback","hotReloaderSpan","trace","undefined","version","__NEXT_VERSION","stop","encryptionKey","generateEncryptionKeyBase64","clientRouterFilters","experimental","clientRouterFilter","project","turbo","createProject","projectPath","rootPath","outputFileTracingRoot","jsConfig","getTurbopackJsConfig","watch","dev","defineEnv","createDefineEnv","isTurbopack","config","fetchCacheKeyPrefix","middlewareMatchers","previewProps","prerenderManifest","preview","memoryLimit","onCleanup","onExit","entrypointsSubscription","entrypointsSubscribe","currentWrittenEntrypoints","Map","currentEntrypoints","global","app","document","error","middleware","instrumentation","page","currentTopLevelIssues","currentEntryIssues","manifestLoader","TurbopackManifestLoader","changeSubscriptions","serverPathState","readyIds","Set","currentEntriesHandlingResolve","currentEntriesHandling","Promise","resolve","assetMapper","AssetMapper","clearRequireCache","key","writtenEndpoint","force","path","contentHash","serverPaths","set","hasChange","endsWith","localKey","localHash","get","globalHash","hasAppPaths","some","p","startsWith","deleteAppClientCache","map","join","file","clearModuleContext","deleteCache","buildingIds","startBuilding","id","requestUrl","forceRebuild","has","size","consoleStore","setState","loading","trigger","url","add","finishBuilding","delete","hmrEventHappened","hmrHash","clients","clientStates","WeakMap","sendToClient","client","payload","send","JSON","stringify","sendEnqueuedMessages","issueMap","values","filter","i","severity","state","clientIssues","hmrPayloads","clear","turbopackUpdates","action","HMR_ACTIONS_SENT_TO_BROWSER","TURBOPACK_MESSAGE","data","sendEnqueuedMessagesDebounce","debounce","sendHmr","sendTurbopackMessage","diagnostics","issues","push","subscribeToChanges","includeIssues","endpoint","makePayload","side","splitEntryKey","changedPromise","changed","change","processIssues","unsubscribeFromChanges","subscription","return","subscribeToHmrEvents","getEntryKey","hasEntrypointForKey","subscriptions","hmrEvents","next","type","e","reloadAction","RELOAD_PAGE","close","unsubscribeFromHmrEvents","handleEntrypointsSubscription","entrypoints","processTopLevelIssues","handleEntrypoints","devRewrites","productionRewrites","logErrors","hooks","handleWrittenEndpoint","result","propagateServerField","bind","mkdir","recursive","writeFile","overlayMiddleware","getOverlayMiddleware","versionInfoPromise","getVersionInfo","telemetry","isEnabled","devtoolsFrontendUrl","nodeDebugType","getNodeDebugType","debugPort","debugInfo","debugInfoList","fetch","then","res","json","hotReloader","turbopackProject","activeWebpackConfigs","serverStats","edgeServerStats","run","req","_parsedUrl","params","matchNextPageBundleRequest","decodedPagePath","param","decodeURIComponent","denormalizedPagePath","denormalizePagePath","ensurePage","clientOnly","definition","catch","console","finished","onHMR","socket","head","onUpgrade","handleUpgrade","on","addEventListener","parsedData","parse","toString","event","manualTraceChild","spanName","msToNs","startTime","endTime","attributes","updatedModules","isPageHidden","hadRuntimeError","dependencyChain","Log","warn","FAST_REFRESH_RUNTIME_RELOAD","Array","isArray","cleanedModulePath","replace","Error","turbopackConnected","TURBOPACK_CONNECTED","errors","entryIssues","issue","message","formatIssue","printNonFatalIssue","versionInfo","sync","SYNC","warnings","hash","debug","setHmrServerError","_error","clearHmrServerError","start","getCompilationErrors","appEntryKey","pagesEntryKey","topLevelIssues","thisEntryIssues","formattedIssue","isWellKnownError","invalidate","reloadAfterInvalidation","entrypoint","clearAllModuleContexts","SERVER_COMPONENT_CHANGES","buildFallbackError","inputPage","appPaths","isApp","BLOCKED_PAGES","includes","routeDef","findPagePathData","pageExtensions","pagesDir","appDir","isAppPageRouteDefinition","normalizedPage","normalizeAppPath","matchingAppPaths","pathname","handlePagesErrorRoute","setPathsForKey","clientPaths","isInsideAppDir","bundlePath","normalizedAppPage","normalizedPageToTurbopackStructureRoute","extname","filename","route","PageNotFoundError","handleRouteType","err","exit","writeManifests","handleProjectUpdates","updateMessage","updateInfoSubscribe","updateType","BUILDING","addErrors","errorsMap","details","detail","renderStyledStringToErrorAnsi","clientErrors","BUILT","String","time","value","duration","timeMessage","round"],"mappings":"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"}